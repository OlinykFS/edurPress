services:
  edupress:
    build:
      context: ./eduPress
      dockerfile: Dockerfile
    container_name: edupress
    volumes:
      - ./eduPress:/app
      - maven_cache:/root/.m2
    ports:
      - "8080:8080"
      - "35729:35729"
      - "5005:5005"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    

  edupressnextjs:
    build:
      context: ./eduPressNextjs
      dockerfile: Dockerfile
    container_name: edupressnextjs
    volumes:
      - ./eduPressNextjs:/app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - WATCHPACK_POLLING=true
    command: npm run dev

  postgres:
    image: postgres:15.8
    container_name: postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer
    container_name: adminer
    restart: always
    ports:
      - "8081:8080"
    depends_on:
      - postgres

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - edupress
      - edupressnextjs
    extra_hosts:
      - "host.docker.internal:host-gateway"

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

volumes:
  pgdata:
  maven_cache:
  redis_data: